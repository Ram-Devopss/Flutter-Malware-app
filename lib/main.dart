import 'dart:ffi';
import 'package:flutter/material.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:call_log/call_log.dart';
import 'package:url_launcher/url_launcher.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    double screenheight = MediaQuery.of(context).size.height;
    double screenwidth = MediaQuery.of(context).size.width;
    double _sigmaX = 5; // from 0-10
    double _sigmaY = 5; // from 0-10
    double _opacity = 0.2;
    double _width = 350;
    double _height = 300;
    return MaterialApp(
        // to hide debug banner
        debugShowCheckedModeBanner: false,
        theme: ThemeData(
          primarySwatch: Colors.blue,
          visualDensity: VisualDensity.comfortable,

          // Define the default brightness and colors.
          brightness: Brightness.light,
          primaryColor: Colors.red,

          // Define the default font family.
          fontFamily: 'sanserif',

          // Define the default `TextTheme`. Use this to specify the default
          // text styling for headlines, titles, bodies of text, and more.
          textTheme: const TextTheme(
            displayLarge: TextStyle(fontSize: 72, fontWeight: FontWeight.bold),
            titleLarge: TextStyle(fontSize: 30, fontWeight: FontWeight.bold),
            bodyMedium: TextStyle(fontSize: 14, fontFamily: 'sanserif'),
          ),
        ),
        home: Builder(
            builder: (context) => DefaultTabController(
                length: 3,
                child: Scaffold(
                  appBar: (AppBar(
                    bottom: TabBar(
                        indicatorColor: Colors.white,
                        indicator: BoxDecoration(
                            borderRadius:
                                BorderRadius.circular(50), // Creates border
                            color: Colors.white60),
                        tabs: [
                          Tab(
                              icon:
                                  Icon(Icons.phone_missed, color: Colors.red)),
                          Tab(
                              icon: Icon(
                            Icons.phone_callback_outlined,
                            color: Colors.blue,
                          )),
                          Tab(
                            icon: Icon(
                              Icons.call_missed_outgoing_rounded,
                              color: Colors.orange,
                            ),
                          )
                          //Tab(cons)
                        ]),
                    title: Text('Call History',
                        style: TextStyle(color: Colors.white)),
                    backgroundColor: Colors.black,
                  )),
                  body: (TabBarView(
                    children: [missedcalls(), incomecall(), outgoing()],
                  )),
                ))
            /*Center(

                  child: Scaffold(
                      body: Container(

                        child: Center(
                          child: ElevatedButton(child :Text('Call Me'), onPressed:(){


                            print('Making A Call');

   calllog();
                          } ),
                        ),
                      )
                  ),)*/
            ));
  }

/*
  void calllog() async{
    Iterable<CallLogEntry> entries = await CallLog.get();
    for (var item in entries) {
      print("${item.name} ${item.number} ${item.duration}"); 

      //print(item.number)
    }
  }
  */
/*  _makingPhoneCall() async {
    var url = Uri.parse("tel:9776765434");
    if (await canLaunchUrl(url)) {
      await launchUrl(url);
    } else {
      throw 'Could not launch $url';
    }*/
}

/*

  --------------------------------------------------------------------



        Center:(child: ElevatedButton(onPressed: () async{

      Iterable<CallLogEntry> entries = await CallLog.get();
      for (var item in entries) {
        print("${item.name} ${item.number} ${item.duration}");
         setState(() {


        }

      }, child: Text('click me'))


   */

class incomecall extends StatefulWidget {
  const incomecall({super.key});

  @override
  State<incomecall> createState() => _incomecallState();
}

class _incomecallState extends State<incomecall> {
  @override
  late List name = ['Fetch Up'];

  final icons = [Icons.phone_missed];
  @override
  Widget build(BuildContext context) {
    return ListView.builder(
        itemCount: name.length,
        itemBuilder: (context, index) {
          return Card(
              child: ListTile(
                  onTap: () async {
                    print('taped');
                    var calme = await calllog();

                    for (var item in calme) {
                      if (name.contains(item.name)) {
                      } else {
                        name.add("${item.name} \n${item.number}");

                        print(item.callType);
                      }
                    }
                    print('done');
                    print(name.length);
                    setState(() {
                      name.remove('Fetch Up');
                      name = name;
                    });
                  },
                  title:
                      Text(name[index] == "" ? "Unknown Number" : name[index]),
                  //subtitle: Text(numbers[index]),
                  leading: CircleAvatar(
                      backgroundImage: NetworkImage(
                          "https://e7.pngegg.com/pngimages/771/18/png-clipart-call-logo-iphone-facetime-computer-icons-computer-software-call-electronics-text.png")),
                  trailing: Icon(Icons.call_missed_outgoing_rounded,
                      color: Colors.orange)));
        });
  }

  Future<Iterable> calllog() async {
    Iterable<CallLogEntry> entries = await CallLog.query(
      type: CallType.outgoing,
    );
    return entries;
  }
}

class outgoing extends StatefulWidget {
  const outgoing({super.key});

  @override
  State<outgoing> createState() => _outgoingState();
}

class _outgoingState extends State<outgoing> {
  @override
  late List name = ['Fetch Up'];

  final icons = [Icons.phone_missed];
  @override
  Widget build(BuildContext context) {
    return ListView.builder(
        itemCount: name.length,
        itemBuilder: (context, index) {
          return Card(
              child: ListTile(
                  onTap: () async {
                    print('taped');
                    var calme = await calllog();

                    for (var item in calme) {
                      if (name.contains(item.name)) {
                      } else {
                        name.add("${item.name} \n${item.number}");
                        print(item.callType);
                      }
                    }
                    print('done');
                    print(name.length);
                    setState(() {
                      name.remove('Fetch Up');
                      name = name;
                    });
                  },
                  title:
                      Text(name[index] == "" ? "Unknown Number" : name[index]),
                  // subtitle: Text(numbers[index]),

                  leading: CircleAvatar(
                      backgroundImage: NetworkImage(
                          "https://e7.pngegg.com/pngimages/771/18/png-clipart-call-logo-iphone-facetime-computer-icons-computer-software-call-electronics-text.png")),
                  trailing: Icon(Icons.call_missed_outgoing_rounded,
                      color: Colors.orange)));
        });
  }

  Future<Iterable> calllog() async {
    Iterable<CallLogEntry> entries = await CallLog.query(
      type: CallType.outgoing,
    );
    return entries;
  }
}

class missedcalls extends StatefulWidget {
  const missedcalls({super.key});

  @override
  State<missedcalls> createState() => _missedcallsState();
}

class _missedcallsState extends State<missedcalls> {
  late List name = ['Fetch Up'];
  final icons = [Icons.phone_missed];
  @override
  Widget build(BuildContext context) {
    return ListView.builder(
        itemCount: name.length,
        itemBuilder: (context, index) {
          return Card(
              child: ListTile(
                  onTap: () async {
                    print('taped');
                    var calme = await calllog();

                    for (var item in calme) {
                      print(item.callType);

                      if (name.contains(item.name)) {
                      } else {
                        name.add("${item.name} \n${item.number}");
                        print(item.callType);
                      }
                    }

                    print('done');
                    print(name.length);
                    setState(() {
                      name.remove('Fetch Up');
                      name = name;
                    });
                  },
                  title:
                      Text(name[index] == '' ? "Unknown Number" : name[index]),

                  //subtitle: Text(numbers[index]),

                  leading: CircleAvatar(
                      backgroundImage: NetworkImage(
                          "https://e7.pngegg.com/pngimages/771/18/png-clipart-call-logo-iphone-facetime-computer-icons-computer-software-call-electronics-text.png")),
                  trailing: Icon(Icons.phone_missed, color: Colors.red)));
        });
  }

  Future<Iterable> calllog() async {
    Iterable<CallLogEntry> entries = await CallLog.query(
      type: CallType.missed,
    );
    return entries;
  }
}
